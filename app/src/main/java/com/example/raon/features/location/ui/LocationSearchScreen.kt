package com.example.raon.features.location.ui

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.MyLocation
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LocationSearchScreen() {
    var searchText by remember { mutableStateOf("") }

    val nearbyLocations = listOf(
        "ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨ Î¨∏ÎûòÎèô6Í∞Ä", "ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨ Î¨∏ÎûòÎèô5Í∞Ä", "ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨ Î¨∏ÎûòÎèô4Í∞Ä",
        "ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨ ÏñëÌèâÎèô1Í∞Ä", "ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨ ÏñëÌèâÏ†ú1Îèô", "ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨ ÏñëÌèâÎèô2Í∞Ä",
        "ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨ ÎãπÏÇ∞Îèô2Í∞Ä", "ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨ Î¨∏ÎûòÎèô3Í∞Ä", "ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨ Î¨∏ÎûòÎèô2Í∞Ä",
        "ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨ ÎãπÏÇ∞Îèô1Í∞Ä", "ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨ Î¨∏ÎûòÎèô", "ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨ Ïã†Í∏∏Îèô",
        "ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨ ÎèÑÎ¶ºÎèô"
    )

    // üëá 1. ScaffoldÎ°ú Ï†ÑÏ≤¥ UIÎ•º Í∞êÏã∏Ï§çÎãàÎã§.
    Scaffold { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                // üëá 2. ScaffoldÍ∞Ä Ï†úÍ≥µÌïòÎäî paddingValuesÎ•º Ï†ÅÏö©Ìï©ÎãàÎã§.
                .padding(paddingValues)
                .padding(16.dp) // Í∏∞Ï°¥Ïùò 16dp Ìå®Îî©ÏùÄ Ïú†ÏßÄÌï©ÎãàÎã§.
        ) {
            // 1. Í≤ÄÏÉâÏ∞Ω
            OutlinedTextField(
                value = searchText,
                onValueChange = { searchText = it },
                modifier = Modifier.fillMaxWidth(),
                placeholder = { Text("ÎÇ¥ ÎèôÎÑ§ Ïù¥Î¶Ñ(Îèô,Ïùç,Î©¥)ÏúºÎ°ú Í≤ÄÏÉâ") },
                leadingIcon = {
                    Icon(Icons.Filled.Search, contentDescription = "Search Icon")
                },
                singleLine = true
            )

            Spacer(modifier = Modifier.height(16.dp))

            // 2. ÌòÑÏû¨ ÏúÑÏπòÎ°ú Ï∞æÍ∏∞ Î≤ÑÌäº
            Button(
                onClick = { /* TODO: ÌòÑÏû¨ ÏúÑÏπò Ï∞æÍ∏∞ Î°úÏßÅ Ïã§Ìñâ */ },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFFFDCC31),
                    contentColor = Color(0xFF3C3C3C)
                )
            ) {
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Icon(
                        Icons.Filled.MyLocation,
                        contentDescription = "Current Location Icon"
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("ÌòÑÏû¨ ÏúÑÏπòÎ°ú Ï∞æÍ∏∞", fontWeight = FontWeight.Bold)
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // 3. 'Í∑ºÏ≤ò ÎèôÎÑ§' ÏÑπÏÖò
            Text("Í∑ºÏ≤ò ÎèôÎÑ§", style = MaterialTheme.typography.titleSmall, color = Color.Gray)
            Spacer(modifier = Modifier.height(8.dp))

            // 4. Í∑ºÏ≤ò ÎèôÎÑ§ Î™©Î°ù
            LazyColumn(
                modifier = Modifier.fillMaxWidth()
            ) {
                items(nearbyLocations) { location ->
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .clickable { /* TODO: ÏÑ†ÌÉùÎêú ÎèôÎÑ§ Ï≤òÎ¶¨ Î°úÏßÅ */ }
                    ) {
                        Text(
                            text = location,
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 16.dp)
                        )
                        HorizontalDivider(color = Color.LightGray.copy(alpha = 0.5f))
                    }
                }
            }
        }
    }
}


@Preview(showBackground = true, name = "Location Search UI Preview")
@Composable
fun LocationSearchScreenPreview() {
    MaterialTheme {
        LocationSearchScreen()
    }
}