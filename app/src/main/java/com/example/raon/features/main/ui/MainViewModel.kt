package com.example.raon.features.main.ui

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.raon.core.network.ApiResult
import com.example.raon.features.chat.data.remote.dto.ChatRoomInfo
import com.example.raon.features.chat.domain.repository.ChatRepository
import com.example.raon.features.user.domain.model.User
import com.example.raon.features.user.domain.repository.UserRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.async
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.first // üëà FlowÏóêÏÑú Ï≤´ Î≤àÏß∏ Í∞íÏùÑ Í∫ºÎÇ¥Í∏∞ ÏúÑÌï¥ import
import kotlinx.coroutines.flow.onEach
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject

data class MainUiState(
    val chatRooms: List<ChatRoomInfo> = emptyList(),
    val unreadChatCount: Int = 0,
    val isLoading: Boolean = true
)

@HiltViewModel
class MainViewModel @Inject constructor(
    private val chatRepository: ChatRepository,
    private val userRepository: UserRepository
) : ViewModel() {

    private val _uiState = MutableStateFlow(MainUiState())
    val uiState = _uiState.asStateFlow()

    val userProfile: StateFlow<User?> = userRepository.getUserProfile()
        .onEach { user -> // <-- Ïù¥ Î∂ÄÎ∂ÑÏùÑ Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî!
            Log.d("YourViewModel", "DataStoreÏóêÏÑú ?1")

            if (user != null) {
                Log.d("YourViewModel", "DataStoreÏóêÏÑú ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏÑ±Í≥µ: $user")
            } else {
                Log.d("YourViewModel", "DataStoreÏóê ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÍ±∞ÎÇò Ï¥àÍ∏∞Í∞íÏûÖÎãàÎã§.")
            }
            Log.d("YourViewModel", "DataStoreÏóêÏÑú ?2")

        }
        .stateIn(
            scope = viewModelScope,
            started = SharingStarted.WhileSubscribed(5000),
            initialValue = null
        )

    init {
        loadInitialData()
    }

    private fun loadInitialData() {
        viewModelScope.launch {
            _uiState.update { it.copy(isLoading = true) }

            val chatRoomsJob = async { chatRepository.getChatRoomList(page = 0) }
            val userProfileJob = async { userRepository.fetchAndSaveUserProfile() }

            val chatResult = chatRoomsJob.await()
            val profileResult = userProfileJob.await()

            // ‚ñº‚ñº‚ñº Ïù¥ Î∂ÄÎ∂ÑÏù¥ ÌïµÏã¨ÏûÖÎãàÎã§ ‚ñº‚ñº‚ñº
            // 1. ÌîÑÎ°úÌïÑ Ï†ÄÏû• ÏûëÏóÖÏù¥ ÏÑ±Í≥µÌñàÎäîÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.
            if (profileResult is ApiResult.Success) {
                // 2. UserRepositoryÏùò getUserProfile() FlowÏóêÏÑú Ï≤´ Î≤àÏß∏ Í∞íÏùÑ Í∫ºÎÇ¥ÏòµÎãàÎã§.
                //    Ïù¥Í≤ÉÏù¥ Î∞îÎ°ú DataStoreÏóê Ï†ÄÏû•Îêú ÏµúÏã† Îç∞Ïù¥ÌÑ∞ÏûÖÎãàÎã§.
                val savedUser = userRepository.getUserProfile().first()

                // 3. Í∫ºÎÇ¥Ïò® Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î•º Î°úÍ∑∏Î°ú Ï∂úÎ†•Ìï©ÎãàÎã§.
                Log.d("MainViewModel", "‚úÖ DataStore Ï†ÄÏû• Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏: $savedUser")
            } else {
                Log.e("MainViewModel", "‚ùå ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Í∞ÄÏ†∏Ïò§Í∏∞/Ï†ÄÏû• Ïã§Ìå®")
            }

            // Ï±ÑÌåÖ Î™©Î°ù ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (Í∏∞Ï°¥Í≥º ÎèôÏùº)
            if (chatResult is ApiResult.Success) {
                val chatList = chatResult.data.data?.chats ?: emptyList()
                val unreadCount = chatList.sumOf { it.unreadCount }
                _uiState.update {
                    it.copy(
                        isLoading = false,
                        chatRooms = chatList,
                        unreadChatCount = unreadCount
                    )
                }
            } else {
                _uiState.update { it.copy(isLoading = false) }
            }
        }
    }
}